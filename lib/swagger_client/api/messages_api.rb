=begin
#Ilinaya SMSFlow

#Ilinaya SMSFlow API

OpenAPI spec version: 1.0.0
Contact: all@ilinaya.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module SwaggerClient
  class MessagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve sent and recieved messages
    # This method allows you to get paginated output of your messages
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :page Specify Page number for results pagination
    # @return [MessagesResponse]
    def messages_get(opts = {})
      data, _status_code, _headers = messages_get_with_http_info(opts)
      data
    end

    # Retrieve sent and recieved messages
    # This method allows you to get paginated output of your messages
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :page Specify Page number for results pagination
    # @return [Array<(MessagesResponse, Fixnum, Hash)>] MessagesResponse data, response status code and response headers
    def messages_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagesApi.messages_get ...'
      end
      # resource path
      local_var_path = '/messages'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessagesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#messages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send Messages
    # Method allows you to send text message to one or many destination numbers
    # @param body order placed for purchasing the pet
    # @param [Hash] opts the optional parameters
    # @return [MessageSendResponse]
    def messages_send_post(body, opts = {})
      data, _status_code, _headers = messages_send_post_with_http_info(body, opts)
      data
    end

    # Send Messages
    # Method allows you to send text message to one or many destination numbers
    # @param body order placed for purchasing the pet
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageSendResponse, Fixnum, Hash)>] MessageSendResponse data, response status code and response headers
    def messages_send_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagesApi.messages_send_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MessagesApi.messages_send_post"
      end
      # resource path
      local_var_path = '/messages/send'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessageSendResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#messages_send_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve message
    # This method allows you to get information about specific message
    # @param message_id Numeric ID of the user to get
    # @param [Hash] opts the optional parameters
    # @return [MessageStatusResponse]
    def messages_status_message_id_get(message_id, opts = {})
      data, _status_code, _headers = messages_status_message_id_get_with_http_info(message_id, opts)
      data
    end

    # Retrieve message
    # This method allows you to get information about specific message
    # @param message_id Numeric ID of the user to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageStatusResponse, Fixnum, Hash)>] MessageStatusResponse data, response status code and response headers
    def messages_status_message_id_get_with_http_info(message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagesApi.messages_status_message_id_get ...'
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling MessagesApi.messages_status_message_id_get"
      end
      # resource path
      local_var_path = '/messages/status/{messageId}'.sub('{' + 'messageId' + '}', message_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessageStatusResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#messages_status_message_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#Ilinaya SMSFlow

#Ilinaya SMSFlow API

OpenAPI spec version: 1.0.0
Contact: all@ilinaya.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module SwaggerClient
  class PackagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Purchase sms package
    # This method allows you to purchase SMS package
    # @param body order placed for purchasing the pet
    # @param [Hash] opts the optional parameters
    # @return [PackagePurchaseResponse]
    def packages_buy_post(body, opts = {})
      data, _status_code, _headers = packages_buy_post_with_http_info(body, opts)
      data
    end

    # Purchase sms package
    # This method allows you to purchase SMS package
    # @param body order placed for purchasing the pet
    # @param [Hash] opts the optional parameters
    # @return [Array<(PackagePurchaseResponse, Fixnum, Hash)>] PackagePurchaseResponse data, response status code and response headers
    def packages_buy_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_buy_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PackagesApi.packages_buy_post"
      end
      # resource path
      local_var_path = '/packages/buy'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PackagePurchaseResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_buy_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve available packages
    # Get available packages for your account
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :page Specify Page number for results pagination
    # @return [PackagesResponse]
    def packages_get(opts = {})
      data, _status_code, _headers = packages_get_with_http_info(opts)
      data
    end

    # Retrieve available packages
    # Get available packages for your account
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :page Specify Page number for results pagination
    # @return [Array<(PackagesResponse, Fixnum, Hash)>] PackagesResponse data, response status code and response headers
    def packages_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_get ...'
      end
      # resource path
      local_var_path = '/packages'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PackagesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get sms package number purchase history
    # Get sms package number purchase history
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :page Specify Page number for results pagination
    # @return [PackagePurchaseHistoryResponse]
    def packages_history_get(opts = {})
      data, _status_code, _headers = packages_history_get_with_http_info(opts)
      data
    end

    # Get sms package number purchase history
    # Get sms package number purchase history
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :page Specify Page number for results pagination
    # @return [Array<(PackagePurchaseHistoryResponse, Fixnum, Hash)>] PackagePurchaseHistoryResponse data, response status code and response headers
    def packages_history_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_history_get ...'
      end
      # resource path
      local_var_path = '/packages/history'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PackagePurchaseHistoryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
